services:
  app:
    container_name: booking-cinema-tickets-app
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*
      - MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED=true
    volumes:
      - app-logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'
    networks:
      - app-network

  promtail:
    container_name: booking-cinema-tickets-promtail
    image: grafana/promtail:2.9.5
    restart: unless-stopped
    volumes:
      - app-logs:/var/log/app:ro
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:9080/ready || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'
    depends_on:
      - loki
    networks:
      - app-network

  loki:
    container_name: booking-cinema-tickets-loki
    image: grafana/loki:2.9.5
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - LOKI_CONFIG_limits_max_query_parallelism=4
      - LOKI_CONFIG_limits_max_query_series=500
      - LOKI_CONFIG_limits_max_entries_limit_per_query=5000
      - LOKI_CONFIG_limits_max_outstanding_requests_per_tenant=100
      - LOKI_CONFIG_query_range_split_queries_by_interval=15m
      - LOKI_CONFIG_query_range_parallelise_shardable_queries=false
      - LOKI_CONFIG_query_range_results_cache_max_freshness=1m
      - LOKI_CONFIG_query_range_cache_results=true
    volumes:
      - loki-data:/loki
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - app-network

  prometheus:
    container_name: booking-cinema-tickets-prometheus
    image: prom/prometheus:v3.4.0
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-config.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=15d'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network

  node-exporter:
    container_name: booking-cinema-tickets-node-exporter
    image: prom/node-exporter:v1.9.0
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.2'
    networks:
      - app-network

  postgres-exporter:
    container_name: booking-cinema-tickets-postgres-exporter
    image: prometheuscommunity/postgres-exporter:v0.17.1
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  grafana:
    container_name: booking-cinema-tickets-grafana
    image: grafana/grafana:12.0.2
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_ALLOW_EMBEDDING=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'
    depends_on:
      - prometheus
    networks:
      - app-network

  postgres:
    container_name: booking-cinema-tickets-db
    image: postgres:17.2-alpine
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    expose:
      - "5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '1'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    command:
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=768MB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=4MB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"

volumes:
  postgres-data:
    name: booking-postgres-data
  prometheus-data:
    name: booking-prometheus-data
  grafana-data:
    name: booking-grafana-data
  app-logs:
    name: booking-app-logs
  loki-data:
    name: booking-loki-data

networks:
  app-network:
    driver: bridge
    name: booking-network
    attachable: true
    internal: false
